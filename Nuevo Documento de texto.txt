Manual básico repaso js


1. Variables
En JavaScript, puedes declarar variables con var, let, o const.

let: Declara variables que pueden cambiar.
const: Declara constantes que no pueden cambiar.
var: Forma más antigua para declarar variables (evitar usarlo en código moderno).
javascript
Copiar código
let x = 10; // Puede cambiar
const y = 20; // No puede cambiar
2. Tipos de Datos
JavaScript tiene varios tipos de datos, incluyendo:

Primitivos: number, string, boolean, null, undefined, symbol, bigint
Objetos: Arrays, funciones, objetos literales, mapas, etc.
javascript
Copiar código
let nombre = "Juan"; // string
let edad = 30; // number
let esAdulto = true; // boolean
let lista = [1, 2, 3]; // array (un tipo de objeto)
let persona = { nombre: "Juan", edad: 30 }; // objeto literal
3. Operadores
Aritméticos:
javascript
Copiar código
let suma = 5 + 3;  // 8
let resta = 5 - 3; // 2
let mult = 5 * 3;  // 15
let div = 5 / 3;   // 1.6666
Comparación:
javascript
Copiar código
5 == '5';  // true (igualdad suelta)
5 === '5'; // false (igualdad estricta)
5 != '5';  // false (diferencia suelta)
5 !== '5'; // true (diferencia estricta)
4. Estructuras de control
Condicionales (if, else if, else):
javascript
Copiar código
let edad = 20;
if (edad >= 18) {
  console.log("Es adulto");
} else if (edad >= 13) {
  console.log("Es adolescente");
} else {
  console.log("Es niño");
}
Switch:
javascript
Copiar código
let dia = 3;
switch (dia) {
  case 1:
    console.log("Lunes");
    break;
  case 2:
    console.log("Martes");
    break;
  default:
    console.log("Otro día");
}
5. Bucles
for:
javascript
Copiar código
for (let i = 0; i < 5; i++) {
  console.log(i); // Imprime números de 0 a 4
}
while:
javascript
Copiar código
let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}
do...while:
javascript
Copiar código
let j = 0;
do {
  console.log(j);
  j++;
} while (j < 5);
6. Funciones
Funciones tradicionales:
javascript
Copiar código
function saludar(nombre) {
  return `Hola, ${nombre}`;
}
console.log(saludar("Juan")); // Hola, Juan
Funciones flecha (ES6):
javascript
Copiar código
const saludar = (nombre) => `Hola, ${nombre}`;
console.log(saludar("Pedro")); // Hola, Pedro
7. Arrays y Métodos comunes
javascript
Copiar código
let numeros = [1, 2, 3, 4];

// Acceder a un elemento
console.log(numeros[0]); // 1

// Agregar elementos
numeros.push(5); // [1, 2, 3, 4, 5]

// Recorrer un array
numeros.forEach((num) => console.log(num));
8. Objetos
Los objetos se usan para almacenar pares clave-valor.

javascript
Copiar código
let persona = {
  nombre: "Juan",
  edad: 30,
  saludar: function() {
    console.log(`Hola, mi nombre es ${this.nombre}`);
  }
};

persona.saludar(); // Hola, mi nombre es Juan
9. Mapas (Map)
Los mapas son estructuras clave-valor, pero a diferencia de los objetos, las claves pueden ser de cualquier tipo.

javascript
Copiar código
let mapa = new Map();
mapa.set('a', 1);
mapa.set('b', 2);

// Acceder a un valor
console.log(mapa.get('a')); // 1

// Recorrer el mapa
mapa.forEach((valor, clave) => {
  console.log(`Clave: ${clave}, Valor: ${valor}`);
});
10. Clases y Orientación a Objetos
JavaScript permite la creación de clases desde ES6 con la palabra clave class.

Clase Básica:
javascript
Copiar código
class Persona {
  constructor(nombre, edad) {
    this.nombre = nombre;
    this.edad = edad;
  }

  saludar() {
    console.log(`Hola, soy ${this.nombre} y tengo ${this.edad} años`);
  }
}

let juan = new Persona("Juan", 30);
juan.saludar(); // Hola, soy Juan y tengo 30 años
Herencia:
Puedes heredar una clase usando extends y sobreescribir métodos.

javascript
Copiar código
class Empleado extends Persona {
  constructor(nombre, edad, salario) {
    super(nombre, edad);
    this.salario = salario;
  }

  saludar() {
    super.saludar();
    console.log(`Y mi salario es ${this.salario}`);
  }
}

let empleado = new Empleado("Pedro", 35, 50000);
empleado.saludar(); 
// Hola, soy Pedro y tengo 35 años
// Y mi salario es 50000
11. Polimorfismo
El polimorfismo en JavaScript se refiere a la capacidad de usar un método o función de diferentes maneras, especialmente en clases heredadas donde se sobrescriben métodos.

Ejemplo de Polimorfismo:
javascript
Copiar código
class Animal {
  hacerSonido() {
    console.log("El animal hace un sonido");
  }
}

class Perro extends Animal {
  hacerSonido() {
    console.log("El perro ladra");
  }
}

class Gato extends Animal {
  hacerSonido() {
    console.log("El gato maúlla");
  }
}

let animales = [new Perro(), new Gato()];

animales.forEach(animal => animal.hacerSonido());
// El perro ladra
// El gato maúlla
Aquí, las clases Perro y Gato heredan de Animal, pero sobrescriben el método hacerSonido. Esto permite que, aunque invoques el mismo método en diferentes instancias, el comportamiento sea diferente dependiendo del tipo de objeto.





Manual básico repaso js


1. Variables
En JavaScript, puedes declarar variables con var, let, o const.

let: Declara variables que pueden cambiar.
const: Declara constantes que no pueden cambiar.
var: Forma más antigua para declarar variables (evitar usarlo en código moderno).
javascript
Copiar código
let x = 10; // Puede cambiar
const y = 20; // No puede cambiar
2. Tipos de Datos
JavaScript tiene varios tipos de datos, incluyendo:

Primitivos: number, string, boolean, null, undefined, symbol, bigint
Objetos: Arrays, funciones, objetos literales, mapas, etc.
javascript
Copiar código
let nombre = "Juan"; // string
let edad = 30; // number
let esAdulto = true; // boolean
let lista = [1, 2, 3]; // array (un tipo de objeto)
let persona = { nombre: "Juan", edad: 30 }; // objeto literal
3. Operadores
Aritméticos:
javascript
Copiar código
let suma = 5 + 3;  // 8
let resta = 5 - 3; // 2
let mult = 5 * 3;  // 15
let div = 5 / 3;   // 1.6666
Comparación:
javascript
Copiar código
5 == '5';  // true (igualdad suelta)
5 === '5'; // false (igualdad estricta)
5 != '5';  // false (diferencia suelta)
5 !== '5'; // true (diferencia estricta)
4. Estructuras de control
Condicionales (if, else if, else):
javascript
Copiar código
let edad = 20;
if (edad >= 18) {
  console.log("Es adulto");
} else if (edad >= 13) {
  console.log("Es adolescente");
} else {
  console.log("Es niño");
}
Switch:
javascript
Copiar código
let dia = 3;
switch (dia) {
  case 1:
    console.log("Lunes");
    break;
  case 2:
    console.log("Martes");
    break;
  default:
    console.log("Otro día");
}
5. Bucles
for:
javascript
Copiar código
for (let i = 0; i < 5; i++) {
  console.log(i); // Imprime números de 0 a 4
}
while:
javascript
Copiar código
let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}
do...while:
javascript
Copiar código
let j = 0;
do {
  console.log(j);
  j++;
} while (j < 5);
6. Funciones
Funciones tradicionales:
javascript
Copiar código
function saludar(nombre) {
  return `Hola, ${nombre}`;
}
console.log(saludar("Juan")); // Hola, Juan
Funciones flecha (ES6):
javascript
Copiar código
const saludar = (nombre) => `Hola, ${nombre}`;
console.log(saludar("Pedro")); // Hola, Pedro
7. Arrays y Métodos comunes
javascript
Copiar código
let numeros = [1, 2, 3, 4];

// Acceder a un elemento
console.log(numeros[0]); // 1

// Agregar elementos
numeros.push(5); // [1, 2, 3, 4, 5]

// Recorrer un array
numeros.forEach((num) => console.log(num));
8. Objetos
Los objetos se usan para almacenar pares clave-valor.

javascript
Copiar código
let persona = {
  nombre: "Juan",
  edad: 30,
  saludar: function() {
    console.log(`Hola, mi nombre es ${this.nombre}`);
  }
};

persona.saludar(); // Hola, mi nombre es Juan
9. Mapas (Map)
Los mapas son estructuras clave-valor, pero a diferencia de los objetos, las claves pueden ser de cualquier tipo.

javascript
Copiar código
let mapa = new Map();
mapa.set('a', 1);
mapa.set('b', 2);

// Acceder a un valor
console.log(mapa.get('a')); // 1

// Recorrer el mapa
mapa.forEach((valor, clave) => {
  console.log(`Clave: ${clave}, Valor: ${valor}`);
});
10. Clases y Orientación a Objetos
JavaScript permite la creación de clases desde ES6 con la palabra clave class.

Clase Básica:
javascript
Copiar código
class Persona {
  constructor(nombre, edad) {
    this.nombre = nombre;
    this.edad = edad;
  }

  saludar() {
    console.log(`Hola, soy ${this.nombre} y tengo ${this.edad} años`);
  }
}

let juan = new Persona("Juan", 30);
juan.saludar(); // Hola, soy Juan y tengo 30 años
Herencia:
Puedes heredar una clase usando extends y sobreescribir métodos.

javascript
Copiar código
class Empleado extends Persona {
  constructor(nombre, edad, salario) {
    super(nombre, edad);
    this.salario = salario;
  }

  saludar() {
    super.saludar();
    console.log(`Y mi salario es ${this.salario}`);
  }
}

let empleado = new Empleado("Pedro", 35, 50000);
empleado.saludar(); 
// Hola, soy Pedro y tengo 35 años
// Y mi salario es 50000
11. Polimorfismo
El polimorfismo en JavaScript se refiere a la capacidad de usar un método o función de diferentes maneras, especialmente en clases heredadas donde se sobrescriben métodos.

Ejemplo de Polimorfismo:
javascript
Copiar código
class Animal {
  hacerSonido() {
    console.log("El animal hace un sonido");
  }
}

class Perro extends Animal {
  hacerSonido() {
    console.log("El perro ladra");
  }
}

class Gato extends Animal {
  hacerSonido() {
    console.log("El gato maúlla");
  }
}

let animales = [new Perro(), new Gato()];

animales.forEach(animal => animal.hacerSonido());
// El perro ladra
// El gato maúlla
Aquí, las clases Perro y Gato heredan de Animal, pero sobrescriben el método hacerSonido. Esto permite que, aunque invoques el mismo método en diferentes instancias, el comportamiento sea diferente dependiendo del tipo de objeto.




//ver 'overlay'